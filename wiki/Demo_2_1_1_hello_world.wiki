#summary 演示hello world的编写
#labels Featured,Demo-2-1-1-hello-world,Phase-Deploy

===功能说明===
系统定义一个变量--"hello world", 然后将此变量传递给 输出服务器(), 由输出服务器打印显示 "hello world"

===pipeline文件===

{{{
<?xml version="1.0"?>

<root>
  <economy name="main">
    <market name="main">
      <supplier name="main">
        <server name="main">
          <service name="main">
            <pipeline>
              <line>
                <step primarayService="main.main.main.io-server.output">
                  <param-input>
                    <declare>
                      <define-param name="input-data">hello world</define-param>
                    </declare>
                  </param-input>
                </step>
              </line>
            </pipeline>
          </service>
        </server>
        <server name="io-server" host="127.0.0.1">
          <service name="output" port="10001" />
        </server>
      </supplier>
    </market>
  </economy>
</root>
}}}

===说明===
===执行入口===
按照传统语言处理方法, 找main; 但这里需要不断找main, 这里有5个main, 直到找到service name="main" 然后执行pipeline
===参数===
{{{
<define-param name="input-data">hello world</define-param>
}}}

这个就是要输出的参数

===远程服务声明===
{{{
<server name="io-server" host="127.0.0.1">
  <service name="output" port="10001" />
</server>
}}}

===远程服务调用===
{{{
<step primarayService="main.main.main.io-server.output">
}}}
指明要将 "hello world"传递到那台服务器上处理. 程序有一个实现了这个服务器功能Demo中的OutputServer类